{"version":3,"sources":["../src/index.js"],"names":["validateArgs","urls","stringErr","Error","urlArr","Array","isArray","forEach","url","URL","err","input","requestJSONs","validUrls","Promise","allSettled","map","response","all","index","reason","status","value","result","json","data","message"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7B,MAAMC,SAAS,GAAG,IAAIC,KAAJ,CAChB,4DADgB,CAAlB;AAGA,MAAIC,MAAJ;;AAEA,MAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5BG,IAAAA,MAAM,GAAG,CAACH,IAAD,CAAT;AACD,GAFD,MAEO,IAAII,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AAC9BA,IAAAA,IAAI,CAACM,OAAL,CAAa,UAACC,GAAD,EAAS;AACpB,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,cAAMN,SAAN;AACD;AACF,KAJD;AAKAE,IAAAA,MAAM,uCAAOH,IAAP,CAAN;AACD,GAPM,MAOA;AACL,UAAMC,SAAN;AACD;;AAEDE,EAAAA,MAAM,CAACG,OAAP,CAAe,UAACC,GAAD,EAAS;AACtB,QAAI;AACF,UAAIC,QAAJ,CAAQD,GAAR;AACD,KAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,YAAM,IAAIP,KAAJ,WAAaO,GAAG,CAACC,KAAjB,yBAAN;AACD;AACF,GAND;AAQA,SAAOP,MAAP;AACD,CA5BD;;AA8BA,IAAMQ,YAAY;AAAA,2FAAG,kBAAOX,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACbY,YAAAA,SADa,GACDb,YAAY,CAACC,IAAD,CADX;AAAA;AAAA,mBAEIa,OAAO,CAACC,UAAR,CAAmBF,SAAS,CAACG,GAAV,CAAc,UAACR,GAAD;AAAA,qBAAS,2BAAMA,GAAN,CAAT;AAAA,aAAd,CAAnB,CAFJ;;AAAA;AAEbS,YAAAA,QAFa;AAAA;AAAA,mBAINH,OAAO,CAACI,GAAR,CACXD,QAAQ,CAACD,GAAT;AAAA,wGAAa,wBAAkCG,KAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,wBAAAA,MAAT,SAASA,MAAT,EAAiBC,MAAjB,SAAiBA,MAAjB,EAAyBC,KAAzB,SAAyBA,KAAzB;AACLC,wBAAAA,MADK,GACI;AAAEf,0BAAAA,GAAG,EAAEK,SAAS,CAACM,KAAD;AAAhB,yBADJ;;AAAA,8BAGPE,MAAM,KAAK,WAHJ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAIcC,KAAK,CAACE,IAAN,EAJd;;AAAA;AAAA;AAIDC,wBAAAA,IAJC,qBAIDA,IAJC;AAKTF,wBAAAA,MAAM,CAACE,IAAP,GAAcA,IAAd;AALS;AAAA;;AAAA;AAOTF,wBAAAA,MAAM,CAACH,MAAP,GAAgBA,MAAM,CAACM,OAAvB;;AAPS;AAAA,yDAUJH,MAVI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAb;;AAAA;AAAA;AAAA;AAAA,gBADW,CAJM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZX,YAAY;AAAA;AAAA;AAAA,GAAlB;;eAoBeA,Y","sourcesContent":["import fetch from 'node-fetch';\nimport { URL } from 'url';\n\nconst validateArgs = (urls) => {\n  const stringErr = new Error(\n    'Please provide a single url string or array of url strings'\n  );\n  let urlArr;\n\n  if (typeof urls === 'string') {\n    urlArr = [urls];\n  } else if (Array.isArray(urls)) {\n    urls.forEach((url) => {\n      if (typeof url !== 'string') {\n        throw stringErr;\n      }\n    });\n    urlArr = [...urls];\n  } else {\n    throw stringErr;\n  }\n\n  urlArr.forEach((url) => {\n    try {\n      new URL(url);\n    } catch (err) {\n      throw new Error(`${err.input} is not a valid url`);\n    }\n  });\n\n  return urlArr;\n};\n\nconst requestJSONs = async (urls) => {\n  const validUrls = validateArgs(urls);\n  const response = await Promise.allSettled(validUrls.map((url) => fetch(url)));\n\n  return await Promise.all(\n    response.map(async ({ reason, status, value }, index) => {\n      const result = { url: validUrls[index] };\n\n      if (status === 'fulfilled') {\n        const { data } = await value.json();\n        result.data = data;\n      } else {\n        result.reason = reason.message;\n      }\n\n      return result;\n    })\n  );\n};\n\nexport default requestJSONs;\n"],"file":"index.js"}