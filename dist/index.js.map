{"version":3,"sources":["../src/index.js"],"names":["validateArgs","urls","urlArr","Array","isArray","Error","forEach","url","URL","err","input","requestJSONs","validUrls","Promise","allSettled","map","results","all","index","reason","status","value","json","res","message","data"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7B,MAAIC,MAAJ;;AAEA,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BC,IAAAA,MAAM,GAAG,CAACD,IAAD,CAAT;AACD,GAFD,MAEO,IAAI,CAACE,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAL,EAA0B;AAC/B,UAAM,IAAII,KAAJ,CAAU,8CAAV,CAAN;AACD,GAFM,MAEA;AACLH,IAAAA,MAAM,uCAAOD,IAAP,CAAN;AACD;;AAEDC,EAAAA,MAAM,CAACI,OAAP,CAAe,UAACC,GAAD,EAAS;AACtB,QAAI;AACF,UAAIC,QAAJ,CAAQD,GAAR;AACD,KAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,YAAM,IAAIJ,KAAJ,WAAaI,GAAG,CAACC,KAAjB,yBAAN;AACD;AACF,GAND;AAQA,SAAOR,MAAP;AACD,CApBD;;AAsBA,IAAMS,YAAY;AAAA,2FAAG,kBAAOV,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACbW,YAAAA,SADa,GACDZ,YAAY,CAACC,IAAD,CADX;AAAA;AAAA,mBAEGY,OAAO,CAACC,UAAR,CAAmBF,SAAS,CAACG,GAAV,CAAc,UAACR,GAAD;AAAA,qBAAS,2BAAMA,GAAN,CAAT;AAAA,aAAd,CAAnB,CAFH;;AAAA;AAEbS,YAAAA,OAFa;AAAA;AAAA,mBAINH,OAAO,CAACI,GAAR,CACXD,OAAO,CAACD,GAAR;AAAA,wGAAY,wBAAkCG,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,wBAAAA,MAAT,SAASA,MAAT,EAAiBC,MAAjB,SAAiBA,MAAjB,EAAyBC,KAAzB,SAAyBA,KAAzB;AAAA;AAAA,+BACQA,KAAK,CAACC,IAAN,EADR;;AAAA;AACJC,wBAAAA,GADI;AAAA;AAGRhB,0BAAAA,GAAG,EAAEK,SAAS,CAACM,KAAD;AAHN,2BAIJE,MAAM,KAAK,UAAX,GAAwB;AAAED,0BAAAA,MAAM,EAAEA,MAAM,CAACK;AAAjB,yBAAxB,GAAqD,EAJjD,GAKJJ,MAAM,KAAK,WAAX,GAAyB;AAAEC,0BAAAA,KAAK,EAAGE,GAAD,CAAME;AAAf,yBAAzB,GAAiD,EAL7C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBADW,CAJM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZd,YAAY;AAAA;AAAA;AAAA,GAAlB;;eAgBeA,Y","sourcesContent":["import fetch from 'node-fetch';\nimport { URL } from 'url';\n\nconst validateArgs = (urls) => {\n  let urlArr;\n\n  if (typeof urls === 'string') {\n    urlArr = [urls];\n  } else if (!Array.isArray(urls)) {\n    throw new Error('Please provide a single url or array of urls');\n  } else {\n    urlArr = [...urls];\n  }\n\n  urlArr.forEach((url) => {\n    try {\n      new URL(url);\n    } catch (err) {\n      throw new Error(`${err.input} is not a valid url`);\n    }\n  });\n\n  return urlArr;\n};\n\nconst requestJSONs = async (urls) => {\n  const validUrls = validateArgs(urls);\n  const results = await Promise.allSettled(validUrls.map((url) => fetch(url)));\n\n  return await Promise.all(\n    results.map(async ({ reason, status, value }, index) => {\n      const res = await value.json();\n      return {\n        url: validUrls[index],\n        ...(status === 'rejected' ? { reason: reason.message } : {}),\n        ...(status === 'fulfilled' ? { value: (res).data } : {}),\n      };\n    })\n  );\n};\n\nexport default requestJSONs;\n"],"file":"index.js"}